# aqui vou fazer o mesmo procedimento para simula√ß√£o por√©m montando a equa√ß√£o para um pendulo simples
#
#
using DifferentialEquations
using Plots
pyplot()
type InputRobot{T} <: DEDataVector{T}
    x::Array{T,1}
    tau::Array{T,1}
end

#=
Fun√ß√£o que realiza a simula√ß√£o
entradas:
kp - vetor de ganhos proporcionais
kv - vetor de ganhos derivativos
r  - vetor de refer√™ncia
sa√≠das :(as que irei precisar)
e - somat√≥rio do erro de posi√ß√£o
J - somat√≥rio do jerk
=#
function simulation(kp,kv,r,tend)
    t0 = 0.
    x_0 = [0.,0.]
    v_0 = [0.,0.]
    if length(kp) != 2
        error("O vetor de ganhos Kp deve ter mesma dimens√£o que a quantidade de juntas do rob√¥ ($(size))")
    elseif length(kv) != 2
        error("O vetor de ganhos Kv deve ter mesma dimens√£o que a quantidade de juntas do rob√¥ ($(size))")
    elseif length(r) != 2
        error("O vetor de refer√™ncia r deve ter mesma dimens√£o que a quantidade de juntas do rob√¥ ($(size))")
    end
    KP = diagm(kp)
    KV = diagm(kv)
    Ts = 0.02

    #fun√ß√£o contendo o sistema, rob√¥ sendo utilizado
    function robot(du,u,p,t)
        m1 = 0.2866
        L0 = 0.201
        L1 = 0.30997
        l1 = 0.154985
        I0 = 0.0052
        I1 = 0.0023
        g = 9.81


        Œ∏ = u[1:2]
        dŒ∏ = u[3:4]
        M = [I0 + m1*(L0^2)+(l1^2)*m1*(sin(Œ∏[2])^2) L0*l1*m1*cos(Œ∏[2]);
        L0*l1*m1*cos(Œ∏[2]) I1+m1*(l1^2)]

        C = [2*(l1^2)*m1*sin(Œ∏[2])*cos(Œ∏[2])*dŒ∏[2]  -L0*l1*m1*sin(Œ∏[2])*dŒ∏[2];
        -(l1)^2*m1*sin(Œ∏[2])*cos(Œ∏[2])*dŒ∏[1]  0]

        G = [0;
        -g*l1*m1*sin(Œ∏[2])]

        du[1:2] = dŒ∏
        du[3:4] = inv(M)*(u.tau - C*dŒ∏ -G)
    end

    function controlador(integrator)
        for c in user_cache(integrator)
            q = c.x[1:2]
            dotq = c.x[3:4]
            e = r - q
            #println(integrator.t)
            #println(dotq)
            c.tau = KP*e - KV*dotq
            println(c.tau)
        end
    end

    cbs = PeriodicCallback(controlador,Ts)
    tspan = (t0,tend)
    start = InputRobot(vcat(x_0,v_0), zeros(7))
    prob = ODEProblem(robot,start,tspan)
    sol = solve(prob,Tsit5(),callback = cbs,saveat = Ts/2)
    out_x = map(x -> x[1:2],sol.u) #posi√ß√£o
    out_dx = map(x -> x[3:end],sol.u)
    #velocidade
    #Aqui estou fazendo uma aproxima√ß√£o da acelera√ß√£o e do jerk
    out_d2x = diff(out_dx)/Ts #acelera√ß√£o
    out_d3x = diff(out_d2x)/Ts #jerk

    out_x, out_dx, out_d2x, out_d3x, sol.t
end

Œ∏, œâ, Œ±, ùö•, t = simulation([0., 0.],[0.,0.],[1.,1.],2);

Œ∏1 = map(x -> x[1],Œ∏)
Œ∏2 = map(x -> x[2],Œ∏)
œâ1 = map(x -> x[1],œâ)
œâ2 = map(x -> x[2],œâ)

plot(t,teta2, xlabel = "tempo (s)", ylabel = "Posi√ß√£o (rad)", title="Simula√ß√£o p√™ndulo simples")
